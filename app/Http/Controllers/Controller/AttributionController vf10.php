<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Models\Attribution;
use App\Models\Coursier;
use App\Models\Pli;
use App\Models\PliStatuerHistory;
use App\Models\Statuer;
use Carbon\Carbon;
use Illuminate\Http\Request;

class AttributionController extends Controller
{

                // Pour l'attribution automatique

                


                // ,/pOUR Attribution automatique

















                // La fonction index ici
                public function index()
                {
                    // ğŸ”¹ RÃ©cupÃ©rer les zones des expÃ©diteurs et des destinataires des plis non attribuÃ©s
                    $zonesExpediteurs = Pli::pluck('user_zone')->unique()->filter(fn($zone) => !is_null($zone) && $zone !== '000') ?? collect([]);
                    $zonesDestinataires = Pli::pluck('destinataire_zone')->unique()->filter(fn($zone) => !is_null($zone) && $zone !== '000') ?? collect([]);

                    // ğŸ”¹ SÃ©lectionner les coursiers disponibles
                    $coursiersDisponibles = Coursier::where(function ($query) use ($zonesExpediteurs, $zonesDestinataires) {
                        if ($zonesExpediteurs->isNotEmpty()) {
                            $query->whereIn('zones', $zonesExpediteurs);
                        }
                        if ($zonesDestinataires->isNotEmpty()) {
                            $query->orWhereIn('zones', $zonesDestinataires);
                        }
                    })->get(['id', 'nom', 'prenoms', 'zones', 'telephone']) ?? collect([]);

                    // ğŸ”¹ SÃ©lectionner TOUS les coursiers comme alternative
                    $coursiersAlternatifs = Coursier::all(['id', 'nom', 'prenoms', 'zones', 'telephone']) ?? collect([]);

                                                // ğŸ”¹ Plis jamais attribuÃ©s (aucun ramassage ni dÃ©pÃ´t)
                        $plies = Pli::whereDoesntHave('attributions')->get() ?? collect([]);

                        // ğŸ”¹ Plis ramassÃ©s mais pas encore dÃ©posÃ©s
                        $plisRamassageList = Pli::whereHas('attributions', function ($query) {
                            $query->whereNotNull('coursier_ramassage_id')->whereNull('coursier_depot_id');
                        })->get() ?? collect([]);

                        // ğŸ”¹ Plis dÃ©posÃ©s (ont Ã©tÃ© ramassÃ©s et sont maintenant en dÃ©pÃ´t)
                        $plisDepotList = Pli::whereHas('attributions', function ($query) {
                            $query->whereNotNull('coursier_depot_id');
                        })->get() ?? collect([]);

                        // ğŸ”¹ Liste complÃ¨te des plis attribuÃ©s (ramassÃ©s et/ou dÃ©posÃ©s)
                        $plisAttribuesList = Pli::whereHas('attributions')->paginate(10) ?? collect([]);



                    // ğŸ”¹ Ajout des dates d'attribution aux plis
                    $plies = $plies->map(function ($pli) {
                        $pli->date_attribution_ramassage = optional($pli->attributions->whereNotNull('date_ramassage')->first())->date_ramassage ?? 'Non attribuÃ©';

                        $pli->date_attribution_depot = optional($pli->attributions->whereNotNull('date_depot')->first())->date_depot ?? 'Non attribuÃ©';
                        return $pli;
                    });

                    // ğŸ”¹ DÃ©co
                    // ğŸ”¹ Plis jamais attribuÃ©s (aucun ramassage ni dÃ©pÃ´t)


                        $plisNonAttribues = Pli::whereDoesntHave('attributions')->count() ?? 0;

                        // ğŸ”¹ Plis ramassÃ©s mais pas encore dÃ©posÃ©s
                        $plisRamassage = Pli::whereHas('attributions', function ($query) {
                            $query->whereNotNull('coursier_ramassage_id')->whereNull('coursier_depot_id');
                        })->count() ?? 0;

                        // ğŸ”¹ Plis dÃ©posÃ©s (ont Ã©tÃ© ramassÃ©s et sont maintenant en dÃ©pÃ´t)
                        $plisDepot = Pli::whereHas('attributions', function ($query) {
                            $query->whereNotNull('coursier_depot_id');
                        })->count() ?? 0;

                        // ğŸ”¹ Plis complÃ¨tement traitÃ©s (ramassÃ©s et dÃ©posÃ©s)
                        $plisTraites = Pli::whereHas('attributions', function ($query) {
                            $query->whereNotNull('coursier_ramassage_id')->whereNotNull('coursier_depot_id');
                        })->count() ?? 0;


                    // Calcul

                    // ğŸ”¹ Ajout du nombre de livraisons attribuÃ©es pour chaque coursier
                    $coursiersDisponibles = $coursiersDisponibles->map(function ($coursier) {
                        $coursier->nombre_plis_attribues = Attribution::where('coursier_ramassage_id', $coursier->id)
                            ->orWhere('coursier_depot_id', $coursier->id)
                            ->count() ?? 0;
                        return $coursier;
                    });

                    $coursiersAlternatifs = $coursiersAlternatifs->map(function ($coursier) {
                        $coursier->nombre_plis_attribues = Attribution::where('coursier_ramassage_id', $coursier->id)
                            ->orWhere('coursier_depot_id', $coursier->id)
                            ->count() ?? 0;
                        return $coursier;
                    });

                    $nombreCoursiers = Coursier::count() ?? 0;

                    // ğŸ”¥ Envoi des donnÃ©es Ã  la vue
                    return view('admin.attributions.index', compact(
                        'plies', 'plisRamassageList', 'plisDepotList', 'plisAttribuesList',
                        'plisNonAttribues', 'plisRamassage', 'plisDepot', 'plisTraites',
                        'coursiersDisponibles', 'coursiersAlternatifs', 'nombreCoursiers'
                    ));
                }


//Fin de la fonction index

        public function selectionnerCoursiersDisponibles()
        {
            //  RÃ©cupÃ©rer les zones des expÃ©diteurs et des destinataires des plis non attribuÃ©s
            $zonesExpediteurs = Pli::pluck('user_zone')->unique()->filter(function ($zone) {
                return !is_null($zone) && $zone !== '000'; // On exclut les valeurs "000" et NULL
            });

            $zonesDestinataires = Pli::pluck('destinataire_zone')->unique()->filter(function ($zone) {
                return !is_null($zone) && $zone !== '000'; // On exclut les valeurs "000" et NULL
            });

            //  SÃ©lectionner les coursiers dont la zone correspond Ã  l'une des deux
            $coursiersDisponibles = Coursier::where(function ($query) use ($zonesExpediteurs, $zonesDestinataires) {
                if ($zonesExpediteurs->isNotEmpty()) {
                    $query->whereIn('zones', $zonesExpediteurs);
                }
                if ($zonesDestinataires->isNotEmpty()) {
                    $query->orWhereIn('zones', $zonesDestinataires);
                }
            })->get();

            //  SÃ©lectionner TOUS les coursiers comme alternative
            $coursiersAlternatifs = Coursier::all();

            //  Envoyer les donnÃ©es Ã  la vue
            return view('admin.attributions.index', compact('coursiersDisponibles', 'coursiersAlternatifs'));
        }









                                public function attribuerEnGroupe(Request $request)
                    {
                        $validated = $request->validate([
                            'plies' => 'required|array|min:1',
                            'plies.*' => 'exists:plies,id',
                            'type' => 'required|in:ramassage,depot',
                            'coursier_id' => $request->type === 'ramassage' ? 'required|exists:coursiers,id' : 'nullable',
                            'coursier_idAt' => $request->type === 'depot' ? 'required|exists:coursiers,id' : 'nullable',
                        ]);

                        foreach ($validated['plies'] as $pliId) {
                            $pli = Pli::findOrFail($pliId);

                            // ğŸ”¹ Si c'est un ramassage, on crÃ©e une nouvelle attribution
                            if ($validated['type'] === 'ramassage') {
                                $pli->attributions()->create([
                                    'coursier_ramassage_id' => $validated['coursier_id'],
                                    'date_attribution_ramassage' => Carbon::today(),
                                ]);
                            }
                            // ğŸ”¹ Si c'est un dÃ©pÃ´t, on met Ã  jour lâ€™enregistrement existant
                            elseif ($validated['type'] === 'depot') {
                                $attribution = $pli->attributions()->whereNotNull('coursier_ramassage_id')->first();

                                if ($attribution) {
                                    $attribution->update([
                                        'coursier_depot_id' => $validated['coursier_idAt'],
                                        'date_attribution_depot' => Carbon::today(),
                                    ]);
                                } else {
                                    return back()->with('error', 'Impossible dâ€™attribuer au dÃ©pÃ´t : Aucun ramassage trouvÃ© !');
                                }
                            }
                        }

                        return redirect()->back()->with('success', 'Les plis ont Ã©tÃ© attribuÃ©s avec succÃ¨s !');
                    }



         // Debut test attribuer groupe fin


        //Test Attribuer groupe



    // Attribuer un pli Ã  un coursier pour le ramassage ou le dÃ©pÃ´t ---------------------------------

    public function attribuerPli($pliId, Request $request)   // Celui la c'est pour le plis unique
    {
        $pli = Pli::find($pliId);   //Ecoute va recherche le id du pli
        if (!$pli) {
            return redirect()->route('admin.attributions.index')->with('error', 'Pli non trouvÃ©'); // Si tu n'as pas troubvÃ© retourne pli non trouveÃ©
        }

        // Type d'attribution : ramassage ou dÃ©pÃ´t
        $type = $request->input('type');
        if (!in_array($type, ['ramassage', 'depot'])) {
            return redirect()->route('admin.attributions.index')->with('error', 'Type d\'attribution invalide');
        }

        // VÃ©rifier si une attribution existe dÃ©jÃ  pour ce pli avec le mÃªme type
        $existingAttribution = Attribution::where('pli_id', $pli->id)
                                          ->where(function ($query) use ($type) {
                                              if ($type == 'ramassage') {
                                                  $query->whereNotNull('coursier_ramassage_id');
                                              } else {
                                                  $query->whereNotNull('coursier_depot_id');
                                              }
                                          })
                                          ->exists();

                    if ($existingAttribution) {
                        return redirect()->route('admin.attributions.index')->with('error', "Le pli a dÃ©jÃ  Ã©tÃ© attribuÃ© pour le type $type.");
                    }

                    // DÃ©terminer la zone en fonction du type d'attribution
                    $zone = ($type == 'ramassage') ? $pli->user_Zone : $pli->destinataire_zone;

                    // Rechercher des coursiers disponibles dans la zone spÃ©cifique
                $coursiers = Coursier::all()->filter(function ($coursier) use ($zone) {
                $zonesCoursier = is_array($coursier->zones) ? $coursier->zones : explode(',', $coursier->zones);
                return in_array($zone, $zonesCoursier);
            });

        // VÃ©rifier si des coursiers sont disponibles dans la zone
        if ($coursiers->isEmpty()) {
            // Si aucun coursier disponible dans la zone, rÃ©cupÃ©rer tous les autres coursiers
            $coursiers = Coursier::whereRaw("NOT FIND_IN_SET(?, zones)", [$zone])->get();

            if ($coursiers->isEmpty()) {
                return redirect()->route('admin.attributions.index')
                    ->with('error', 'Aucun coursier disponible pour l\'attribution.');
            }

            // Afficher un message d'avertissement pour l'utilisateur
            return view('admin.attributions.alternative', compact('pli', 'type', 'coursiers'));
        }

        // SÃ©lectionner un coursier dans la zone, s'il y en a
        $coursier = $coursiers->first();

        // CrÃ©er ou rÃ©cupÃ©rer une attribution pour le pli
        $attribution = Attribution::firstOrNew(['pli_id' => $pli->id]);

        // Affecter le coursier au ramassage ou au dÃ©pÃ´t
      if($attribution)
        {
            if ($type =='ramassage') {
                $attribution->coursier_ramassage_id = $coursier->id;
                $attribution->date_attribution_ramassage = Carbon::now();  // Enregistrer la date d'attribution du ramassage
            } else {
                $attribution->coursier_depot_id = $coursier->id;
                $attribution->date_attribution_depot = Carbon::now();  // Enregistrer la date d'attribution du dÃ©pÃ´t
            }
        }

        else{
            return redirect()->route('admin.attributions.index')->with('success', "Echec: Nous avons rencontrÃ© un probleme technique $type.");

        }

        // Sauvegarder l'attribution
        $attribution->save();

        return redirect()->route('admin.attributions.index')->with('success', "Pli attribuÃ© avec succÃ¨s pour le $type.");
    }



    public function confirmerAttribution($pliId, $type, Request $request)
    {
        //  VÃ©rification du pli
        $pli = Pli::find($pliId);
        if (!$pli) {
            return redirect()->route('admin.attributions.index')->with('error', 'Pli non trouvÃ©.');
        }

        //  VÃ©rification du coursier sÃ©lectionnÃ©
        $coursierId = $request->input('coursier_id');
        if (!$coursierId) {
            return redirect()->route('admin.attributions.index')->with('error', 'Aucun coursier sÃ©lectionnÃ©.');
        }

        $coursierId = $request->input('coursier_idAt');  //Pour le depot
        if (!$coursierId) {
            return redirect()->route('admin.attributions.index')->with('error', 'Aucun coursier sÃ©lectionnÃ©.');
        }



        //  VÃ©rification si le pli est dÃ©jÃ  attribuÃ©
        if (Attribution::where('pli_id', $pli->id)->exists()) {
            return redirect()->route('admin.attributions.index')->with('error', "Ce pli est dÃ©jÃ  attribuÃ© au type :'$type'.");
        }

        //  VÃ©rification du type dâ€™attribution (EmpÃªche les erreurs)
        if (!in_array($type, ['ramassage', 'depot'])) {
            return redirect()->route('admin.attributions.index')->with('error', "Erreur inconnue : Type '$type' invalide.");
        }

        //  CrÃ©ation d'une nouvelle attribution
        $attribution = new Attribution();
        $attribution->pli_id = $pli->id;

        //  Attribution du coursier selon le type
        if ($type == 'ramassage') {
            $attribution->coursier_ramassage_id = $coursierId;
            $attribution->date_attribution_ramassage = Carbon::now();

        } else { // Ici, `$type === 'depot'` est assurÃ©
            $attribution->coursier_depot_id = $coursierId;
            $attribution->date_attribution_depot = Carbon::now();
        }

        //  Sauvegarde de lâ€™attribution
        $attribution->save();
        $attribution->refresh(); // Recharge les nouvelles valeurs aprÃ¨s lâ€™enregistrement


        //  Redirection avec message de succÃ¨s
        return redirect()->route('admin.attributions.index')->with('success', "Pli attribuÃ© avec succÃ¨s pour le type '$type'.");
    }




// -------------------------------------------------------------------------------------------------
    //  / Fin de la fonction d'attribution des pli

public function impression(Request $request)
{
    // RÃ©cupÃ©rer tous les coursiers
    $coursiers = Coursier::all();

    // RequÃªte de base pour rÃ©cupÃ©rer les plis ayant une attribution de ramassage et le statut "en attente"
    $plisQuery = Pli::whereHas('attributions', function ($query) {
        $query->whereNotNull('coursier_ramassage_id');
    })
    ->whereHas('statuerHistories', function ($query) {
        $query->where('statuer_id', 1)
              ->whereRaw('pli_statuer_history.id = (
                  SELECT MAX(id)
                  FROM pli_statuer_history AS subquery
                  WHERE subquery.pli_id = pli_statuer_history.pli_id
              )');
    });

    // Appliquer le filtre si un coursier est sÃ©lectionnÃ©
    if ($request->has('coursier_id') && $request->input('coursier_id') != '') {
        $plisQuery->whereHas('attributions', function ($query) use ($request) {
            $query->where('coursier_ramassage_id', $request->input('coursier_id'));
        });
    }

    // RÃ©cupÃ©rer les plis filtrÃ©s
    $plis = $plisQuery->get();

    // Passer les plis et les coursiers Ã  la vue
    return view('admin.attributions.impression', compact('plis', 'coursiers'));
}



public function filtrerParCoursierDepot(Request $request)
{
    // RÃ©cupÃ©rer tous les coursiers
    $coursiers = Coursier::all();

    // RequÃªte de base pour rÃ©cupÃ©rer les plis ayant une attribution de ramassage et le statut "en attente"
    $plisQuery = Pli::whereHas('attributions', function ($query) {
        $query->whereNotNull('coursier_depot_id');
    })
    ->whereHas('statuerHistories', function ($query) {
        $query->where('statuer_id', 2)
              ->whereRaw('pli_statuer_history.id = (
                  SELECT MAX(id)
                  FROM pli_statuer_history AS subquery
                  WHERE subquery.pli_id = pli_statuer_history.pli_id
              )');
    });

    // Appliquer le filtre si un coursier est sÃ©lectionnÃ©
    if ($request->has('coursier_id') && $request->input('coursier_id') != '') {
        $plisQuery->whereHas('attributions', function ($query) use ($request) {
            $query->where('coursier_depot_id', $request->input('coursier_id'));
        });
    }

    // RÃ©cupÃ©rer les plis filtrÃ©s
    $plis = $plisQuery->get();

    // Passer les plis et les coursiers Ã  la vue
    return view('admin.attributions.depot', compact('coursiers', 'plis'));
}



        public function pliDejaAttribue($pliId) // Pour l'attribution de l'unique pli
        {
            $pli = Pli::find($pliId); //  Charge l'objet via son ID

            if (!$pli) {
                return false; //  EmpÃªche une erreur si `$pli` n'existe pas
            }

            return $pli->attributions()->exists(); //  VÃ©rifie lâ€™existence dâ€™une attribution
        }




}
